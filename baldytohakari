-- hakari
local player = game.Players.LocalPlayer
local char = player.Character
local Humanoid = char.Humanoid
local hot = player.PlayerGui:WaitForChild("Hotbar")
local hotbar = hot:WaitForChild("Backpack"):WaitForChild("Hotbar")
-- 14516273501

local function cloneToolName(slot, text)
    local toolName = slot.ToolName
    if not slot:FindFirstChild("SkibidiGame") then
        toolName.Visible = false
        local clone = toolName:Clone()
        clone.Name = "SkibidiGame"
        clone.Parent = slot
        clone.Text = text
        clone.Visible = true
    elseif slot:FindFirstChild("SkibidiGame") then
        if slot:FindFirstChild("SkibidiGame").Text ~= text then
            toolName.Visible = false
            slot:FindFirstChild("SkibidiGame").Text = text
        end
    end
end
-- 10470104242
local magichealth = player.PlayerGui:WaitForChild("ScreenGui"):WaitForChild("MagicHealth")
local UltLabel = player.PlayerGui:WaitForChild("ScreenGui"):WaitForChild("MagicHealth"):WaitForChild("TextLabel")
UltLabel.Visible = false
local UltLabel = UltLabel:Clone()
UltLabel.Visible = true
UltLabel.Name = "SkibidiRizzlerGyattOhio"
UltLabel.Parent = magichealth
task.spawn(function()
    while true do
     UltLabel.Text = "idle death gamble"
        for _, slot in ipairs(hotbar:GetChildren()) do
            if slot:FindFirstChild("Base") and slot.Base:FindFirstChild("ToolName") then
                local toolNameText = slot.Base.ToolName.Text
                if toolNameText == "Normal Punch" then
                    cloneToolName(slot.Base, "lucky punch")
                elseif toolNameText == "Consecutive Punches" then
                    cloneToolName(slot.Base, "lucky voley")
                elseif toolNameText == "Shove" then
                    cloneToolName(slot.Base, "pachinco ball")
                elseif toolNameText == "Uppercut" then
                    cloneToolName(slot.Base, "gabmle")
                elseif toolNameText == "Death Counter" then
                    cloneToolName(slot.Base, "lucky counter")
                elseif toolNameText == "Table Flip" then
                    cloneToolName(slot.Base, "ground breaker")
                elseif toolNameText == "Serious Punch" then
                    cloneToolName(slot.Base, "luck")
                elseif toolNameText == "Omni Directional Punch" then
                    cloneToolName(slot.Base, "beyon 100 luck")
                end
            end
        end
        task.wait(1)
    end
end)
-- Create a ScreenGui
local player = game.Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "WatermarkGui"
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create a TextLabel for the watermark
local watermarkLabel = Instance.new("TextLabel")
watermarkLabel.Name = "WatermarkLabel"
watermarkLabel.Text = "hakari by beluganiki on discord version 1"  -- Customize your watermark text here
watermarkLabel.Font = Enum.Font.SourceSans
watermarkLabel.TextSize = 24  -- Set the size of the text
watermarkLabel.TextColor3 = Color3.fromRGB(255, 255, 255)  -- White color
watermarkLabel.BackgroundTransparency = 1  -- Make the background transparent
watermarkLabel.Position = UDim2.new(0.5, 0, 0, 10)  -- Position it at the top center
watermarkLabel.AnchorPoint = Vector2.new(0.5, 0)  -- Center the anchor point horizontally
watermarkLabel.Parent = screenGui

-- Optional: Make the watermark slightly transparent
watermarkLabel.TextTransparency = 0.8  -- Adjust transparency if needed



--[[Animations]]

--[[Move 1]]
local Players = game:GetService("Players")
local Debris = game:GetService("Debris")

-- Animation IDs and setup
local localAnimationId = 10468665991
local exploAnimationId = "rbxassetid://16746824621"  -- Animation ID that triggers the Explo effect
local groundyEffectAnimationId = "rbxassetid://18896127525"  -- Animation ID for groundythingy effect
local randomAnimationIds = {
    groundyEffectAnimationId,  -- Random Animation 1 (triggers groundythingy effect)
    exploAnimationId,          -- Random Animation 2 (triggers Explo effect)
}

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to clone and add green Explo effect on HumanoidRootPart
local function addExploEffect()
    local exploTemplate = game.ReplicatedStorage.Resources.CrabBeam["Explo"].Explo.Attachment
    local exploClone = exploTemplate:Clone()
    exploClone.Parent = humanoidRootPart

    for _, child in ipairs(exploClone:GetChildren()) do
        if child:IsA("ParticleEmitter") then
            child.Color = ColorSequence.new(Color3.new(0, 1, 0))  -- Green color
            child:Emit(15)
            child.Enabled = true
        end
    end

    Debris:AddItem(exploClone, 3)
end

-- Function to add groundythingy effect for animation 18896127525
local function addGroundyEffect()
    local groundyTemplate = game.ReplicatedStorage.Resources.KJEffects["GUTBARRAGVARIANT"].Attachment.groundythingy
    local groundyClone = groundyTemplate:Clone()
    groundyClone.Parent = humanoidRootPart

    for _, child in ipairs(groundyClone:GetChildren()) do
        if child:IsA("ParticleEmitter") then
            child:Emit(15)
            child.Enabled = true
        end
    end

    Debris:AddItem(groundyClone, 3)  -- Remove effect after 3 seconds
end

-- Function to play a random animation from the list
local function playRandomAnimation()
    local randomIndex = math.random(1, #randomAnimationIds)
    local randomAnimationId = randomAnimationIds[randomIndex]

    local animInstance = Instance.new("Animation")
    animInstance.AnimationId = randomAnimationId
    local animTrack = humanoid:LoadAnimation(animInstance)

    if randomAnimationId == exploAnimationId then
        addExploEffect()  -- Trigger Explo effect
        animTrack:Play()
        animTrack:AdjustSpeed(1)
        humanoid.PlatformStand = true
        wait(0.1)
        local startPosition = animTrack.Length - 1.5
        animTrack.TimePosition = math.clamp(startPosition, 0, animTrack.Length)
        animTrack.Stopped:Wait()
        humanoid.PlatformStand = false
    elseif randomAnimationId == groundyEffectAnimationId then
        addGroundyEffect()  -- Trigger groundythingy effect
        animTrack:Play()
        animTrack:AdjustSpeed(3)
    else
        animTrack:Play()
        animTrack:AdjustSpeed(3)
    end
end

-- Function called when an animation is played
local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. localAnimationId then
        animationTrack:Stop()
        playRandomAnimation()
    elseif animationTrack.Animation.AnimationId == "rbxassetid://18903642853" then
        addDekuEffect()  -- Trigger Deku aura and speed boost
    end
end

-- Connect the AnimationPlayed event to the function
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

-- Function to trigger the local animation
local function playLocalAnimation()
    local localAnimation = Instance.new("Animation")
    localAnimation.AnimationId = "rbxassetid://" .. localAnimationId
    local localAnimTrack = humanoid:LoadAnimation(localAnimation)
    localAnimTrack:Play()
    localAnimTrack:AdjustSpeed(1)
end

-- Uncomment the following line to test the local animation
-- playLocalAnimation()  -- Call this function to trigger the local animation when needed



--[[2 move]]
-- Animation ID to override and the custom animation ID
local animationId = 10466974800
local customAnimationId = "rbxassetid://15290930205"

-- Get the local player and wait for the character to load
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Particle effect to clone
local Test = game.ReplicatedStorage.Resources.StoicBomb["stoic bomb boom entrance"].Attachment

-- Function to handle when the target animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create and play the new custom animation
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = customAnimationId
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1)
        newAnimTrack.TimePosition = 0

        -- Clone the particle effect and attach it to HumanoidRootPart
        local particleClone = Test:Clone()
        particleClone.Parent = character:WaitForChild("HumanoidRootPart")

        -- Set particles to green and emit particles
        for _, child in ipairs(particleClone:GetChildren()) do
            if child:IsA("ParticleEmitter") then
                -- Set the color to green
                child.Color = ColorSequence.new(Color3.fromRGB(0, 255, 0))  -- Pure green
                child:Emit(15)
                child.Enabled = true
            end
        end

        -- Set a timer to remove the particle effect after 3 seconds (adjustable)
        local removeTime = 3
        game:GetService("Debris"):AddItem(particleClone, removeTime)
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[3 move]]
local animationId = 10471336737

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://12618271998"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(3)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

                end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[4 move]]
-- Animation ID to override and the custom animation ID
local animationId = 12510170988
local customAnimationId = "rbxassetid://18179181663"

-- Get the local player and wait for the character to load
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- BurnMark particle effect to clone
local BurnMarkTemplate = game.ReplicatedStorage.Resources.FiveSeasonsFX["JumpFX"].JumpFX.BurnMark

-- Function to handle when the target animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create and play the new custom animation
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = customAnimationId
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1)
        newAnimTrack.TimePosition = 0

        -- Add green particle effect to the character's head
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head
        particleEmitter.Rate = 50
        particleEmitter.Lifetime = NumberRange.new(1, 2)
        particleEmitter.Speed = NumberRange.new(5, 10)
        particleEmitter.Color = ColorSequence.new(Color3.fromRGB(0, 255, 0))  -- Green color
        particleEmitter:Emit(100)

        -- Clone the BurnMark effect and attach it to the HumanoidRootPart
        local burnMarkClone = BurnMarkTemplate:Clone()
        burnMarkClone.Parent = character:WaitForChild("HumanoidRootPart")

        -- Set all particle emitters within the BurnMark effect to green and enable them
        for _, child in ipairs(burnMarkClone:GetChildren()) do
            if child:IsA("ParticleEmitter") then
                child.Color = ColorSequence.new(Color3.fromRGB(0, 255, 0))  -- Green color
                child:Emit(15)
                child.Enabled = true
            end
        end

        -- Set a timer to remove the BurnMark effect after 3 seconds (adjustable)
        local removeTime = 3
        game:GetService("Debris"):AddItem(burnMarkClone, removeTime)
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[Wall combo]]


local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Animation ID to listen for
local animationId = 15955393872

-- Replacement animation ID
local replacementAnimationId = 18181589384

-- Function to handle when an animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the specified animation ID
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        print("Detected animation: " .. animationId) -- Debug message

        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            print("Stopping animation: " .. animTrack.Animation.AnimationId) -- Debug message
            animTrack:Stop()
        end

        -- Load the replacement animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://" .. replacementAnimationId
        local Anim = humanoid:LoadAnimation(AnimAnim)

        -- Play the replacement animation
        local startTime = 1
        Anim:Play()
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.7) -- Set the speed of the animation

        print("Playing replacement animation: " .. replacementAnimationId) -- Debug message

        -- Optionally, stop the replacement animation after a delay (if needed)
        -- Replace '5' with the desired duration (in seconds)
        task.delay(5, function()
            if Anim.IsPlaying then
                Anim:Stop()
                print("Stopped replacement animation after delay.")
            end
        end)
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

print("Animation replacement script initialized.") 




--[[Dash]]

local animationId = 10479335397 -- The animation ID to listen for
local player = game.Players.LocalPlayer -- Get the player
local character = player.Character or player.CharacterAdded:Wait() -- Get the player's character
local humanoid = character:WaitForChild("Humanoid") -- Get the humanoid

-- Function to handle the played animation
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the desired animation ID
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Load and play the new animation
        local newAnim = Instance.new("Animation")
        newAnim.AnimationId = "rbxassetid://17838006839" -- Dash animation ID
        local animTrack = humanoid:LoadAnimation(newAnim)

        -- Set the start time and play the animation
        local startTime = 0
        animTrack.TimePosition = startTime
        animTrack:Play()

        -- Adjust the speed of the animation
        animTrack:AdjustSpeed(1.3) -- Set your desired speed

        -- Stop the animation after 1.8 seconds
        delay(1.8, function()
            animTrack:Stop()
        end)
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[3 ult move]]
-- Animation ID to override and custom animation ID
local targetAnimationId = "rbxassetid://12983333733"  -- Original animation ID to override
local customAnimationId = "rbxassetid://18464351556"  -- Custom animation ID to play

-- Get the local player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Function to disable any cutscene-related elements
local function disableCutsceneElements()
    -- List of cutscene-related items that might interfere
    local cutsceneScripts = {
        player.PlayerGui:FindFirstChild("CutsceneScript"),
        player:FindFirstChild("CutsceneController"),
        character:FindFirstChild("CutsceneHandler")
    }

    -- Disable each cutscene script if it exists
    for _, script in pairs(cutsceneScripts) do
        if script then
            script.Disabled = true
        end
    end

    -- Ensure camera stays fixed on the character
    local camera = game.Workspace.CurrentCamera
    camera.CameraSubject = character

    -- Set the camera type to Custom to allow user control
    camera.CameraType = Enum.CameraType.Custom

    -- Disable cutscene UI if it exists
    local cutsceneUI = player.PlayerGui:FindFirstChild("CutsceneUI")
    if cutsceneUI then
        cutsceneUI.Enabled = false
    end
end

-- Function to handle animation override and automatic movement
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the target animation ID
    if animationTrack.Animation.AnimationId == targetAnimationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Disable any potential cutscene elements
        disableCutsceneElements()

        -- Load and play the custom animation
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = customAnimationId

        local customAnimTrack = humanoid:LoadAnimation(newAnimation)
        customAnimTrack:Play()

        -- Adjust playback speed (0.3 for slower speed)
        customAnimTrack:AdjustSpeed(0.3)

        -- Set the movement speed to 40
        humanoid.WalkSpeed = 40

        -- Automatically move forward while the animation is active
        local moveForward = true
        humanoid:Move(Vector3.new(0, 0, -1))  -- Move forward in the negative Z direction

        -- Connect to animation's Stopped event to stop movement when the animation ends
        customAnimTrack.Stopped:Connect(function()
            moveForward = false  -- Stop forward movement
            humanoid.WalkSpeed = 0  -- Stop character movement speed
            humanoid:Move(Vector3.new(0, 0, 0))  -- Stop the movement
        end)

        -- Loop to keep applying forward movement while the animation is playing
        game:GetService("RunService").Heartbeat:Connect(function()
            if moveForward then
                humanoid:Move(Vector3.new(0, 0, -1))  -- Continuously move forward
            end
        end)
    end
end

-- Connect the function to override the target animation when it plays
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[2 ult move]]
-- ID of the animation that triggers the custom behavior
local animationId = 11365563255

-- Get the local player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Function that runs when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the target animationId
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation instance for the new animation
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://18897118507"

        -- Load and play the new animation
        local animTrack = humanoid:LoadAnimation(newAnimation)
        animTrack:Play()

        -- Adjust the speed to make the animation very slow (0.25x speed for quarter speed)
        animTrack:AdjustSpeed(0.5) -- Slows down the animation to 25% of its normal speed

        -- Connect the 'Stopped' event to know when to stop the animation manually
        animTrack.Stopped:Connect(function()
            animTrack:Stop()
        end)

        -- Stop the animation after a certain time using `RunService` for frame updates.
        local startTime = tick()  -- Get current time
        game:GetService("RunService").RenderStepped:Connect(function()
            if tick() - startTime >= 7.2 then -- Increase the time to match the slower speed
                animTrack:Stop()  -- Stop the animation after 7.2 seconds (since it's very slow)
            end
        end)
    end
end

-- Connect the function to the humanoid's AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)



--[[1 ult move]]
-- ID of the animation that triggers the custom behavior
local animationId = 18715881168

-- Get the local player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Function that runs when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the target animationId
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation instance for the new animation
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://16746824621"

        -- Load and play the new animation
        local animTrack = humanoid:LoadAnimation(newAnimation)
        animTrack:Play()

        -- Adjust the speed to make the animation very slow (0.25x speed for quarter speed)
        animTrack:AdjustSpeed(0.5) -- Slows down the animation to 25% of its normal speed

        -- Connect the 'Stopped' event to know when to stop the animation manually
        animTrack.Stopped:Connect(function()
            animTrack:Stop()
        end)

        -- Stop the animation after a certain time using `RunService` for frame updates.
        local startTime = tick()  -- Get current time
        game:GetService("RunService").RenderStepped:Connect(function()
            if tick() - startTime >= 7.2 then -- Increase the time to match the slower speed
                animTrack:Stop()  -- Stop the animation after 7.2 seconds (since it's very slow)
            end
        end)
    end
end

-- Connect the function to the humanoid's AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)








--[[4 ult move]]
-- ID of the animation that triggers the custom behavior
local animationId = 13927612951

-- Get the local player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Function that runs when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the target animationId
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation instance for the new animation
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://15507138928"

        -- Load and play the new animation
        local animTrack = humanoid:LoadAnimation(newAnimation)
        animTrack:Play()

        -- Adjust the speed to make the animation very slow (0.25x speed for quarter speed)
        animTrack:AdjustSpeed(1) -- Slows down the animation to 25% of its normal speed

        -- Connect the 'Stopped' event to know when to stop the animation manually
        animTrack.Stopped:Connect(function()
            animTrack:Stop()
        end)

        -- Stop the animation after a certain time using `RunService` for frame updates.
        local startTime = tick()  -- Get current time
        game:GetService("RunService").RenderStepped:Connect(function()
            if tick() - startTime >= 7.2 then -- Increase the time to match the slower speed
                animTrack:Stop()  -- Stop the animation after 7.2 seconds (since it's very slow)
            end
        end)
    end
end

-- Connect the function to the humanoid's AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)





--[[ult animation]]
local Players = game:GetService("Players")
local Debris = game:GetService("Debris")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local animationId = 12447707844

-- List of animation IDs to choose from
local animationIds = {
    17292549897, -- Example Animation ID 1
    -- Add more animation IDs as needed
}

-- Sound ID
local soundId = "rbxassetid://1837466004" -- Replace with your actual Sound ID

-- Function to get a random animation ID
local function getRandomAnimationId()
    return animationIds[math.random(1, #animationIds)]
end

-- Function to add and play the green particle effect
local function addDropkickEffect()
    -- Clone the specified effect from ReplicatedStorage
    local Test = game.ReplicatedStorage.Resources.KJEffects["DropkickExtra"].lastimpact.Attachment
    local test = Test:Clone()
    test.Parent = humanoidRootPart

    -- Enable particle emitters and set them to green
    for _, child in ipairs(test:GetChildren()) do
        if child:IsA("ParticleEmitter") then
            child.Color = ColorSequence.new(Color3.new(0, 1, 0))  -- Set to green (0, 255, 0)
            child:Emit(15)
            child.Enabled = true
        end
    end

    -- Remove the effect after a set time (e.g., 3 seconds)
    Debris:AddItem(test, 3)
end

-- Function to send chat messages
local function sendChatMessage(message, delay)
    -- Wait for the specified delay time
    task.wait(delay)
    
    -- Send the message to the chat
    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
end

-- Function to handle when the specified animation is played
local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create and load a random animation from the list
        local randomAnimationId = getRandomAnimationId()
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://" .. randomAnimationId
        local Anim = humanoid:LoadAnimation(AnimAnim)

        -- Play the random animation
        Anim:Play()
        Anim:AdjustSpeed(1) -- Adjust the speed of the animation (optional)

        -- Play the sound
        local sound = Instance.new("Sound")
        sound.SoundId = soundId
        sound.Parent = character -- Attach the sound to the character
        sound:Play()

        -- Stop the sound after 20 seconds
        task.delay(20, function()
            if sound then
                sound:Stop()
                sound:Destroy()
            end
        end)

        -- Trigger the DropkickExtra particle effect
        addDropkickEffect()
        
        -- Remove the sound after the animation stops
        Anim.Stopped:Connect(function()
            if sound and sound.Playing then
                sound:Stop()
            end
            sound:Destroy()
        end)

        -- Send chat message for "4 mins and 11 secs" and then "Hakari is immortal"
        sendChatMessage("For the next 4 mins and 11 secs", 0)  -- Send the first message immediately
        sendChatMessage("Hakari is immortal", 1)  -- Send the second message after a 1-second delay
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[END OF ULT ACTIVATION ANIM]]














--[[ Animation Handler Script ]]

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Animation ID to listen for
local animationId = 10470104242

-- Replacement animation ID
local replacementAnimationId = 18464356233

-- Function to handle when an animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the specified animation ID
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        print("Detected animation: " .. animationId) -- Debug message

        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            print("Stopping animation: " .. animTrack.Animation.AnimationId) -- Debug message
            animTrack:Stop()
        end

        -- Load the replacement animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://" .. replacementAnimationId
        local Anim = humanoid:LoadAnimation(AnimAnim)

        -- Set the start time for the replacement animation
        local startTime = 0

        -- Wait for a short duration before playing the animation
        wait(0.2)

        -- Play the replacement animation
        Anim.TimePosition = startTime
        Anim:Play()
        Anim:AdjustSpeed(6) -- Adjust the speed of the animation
        print("Playing replacement animation: " .. replacementAnimationId) -- Debug message
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

print("Animation handler script initialized.") -- Debug message

--[[ Uppercut Animation Handler ]]

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Animation ID to listen for (Uppercut)
local animationId = 10503381238

-- Replacement animation ID
local replacementAnimationId = 18464372850

-- Function to handle when an animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the specified animation ID
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        print("Detected Uppercut animation: " .. animationId) -- Debug message

        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            print("Stopping animation: " .. animTrack.Animation.AnimationId) -- Debug message
            animTrack:Stop()
        end

        -- Load the replacement animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://" .. replacementAnimationId
        local Anim = humanoid:LoadAnimation(AnimAnim)

        -- Set the start time for the replacement animation
        local startTime = 1.3
        Anim.TimePosition = startTime
        
        -- Play the replacement animation
        Anim:Play()
        Anim:AdjustSpeed(6) -- Use positive speed for normal playback
        print("Playing replacement animation: " .. replacementAnimationId) -- Debug message
        
        -- Optionally stop the replacement animation after a set duration
        task.delay(5, function() -- Stop after 5 seconds, adjust as needed
            if Anim.IsPlaying then
                Anim:Stop()
                print("Stopped replacement animation after delay.")
            end
        end)
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

print("Uppercut animation script initialized.") -- Debug message





--[[Punch anims]]

humanoid.AnimationPlayed:Connect(onAnimationPlayed)


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()

local humanoid = character:WaitForChild("Humanoid")


local animationIdsToStop = {

    [17859015788] = true, --punch idk

    [10469493270] = true, --punch1

    [10469630950] = true, --punch2

    [10469639222] = true, --punch3

    [10469643643] = true, --punch4

}


local replacementAnimations = {

    ["10469493270"] = "rbxassetid://17889458563", --punch1

    ["10469630950"] = "rbxassetid://17889461810", --punch2

    ["10469639222"] = "rbxassetid://17889471098", --punch3

    ["10469643643"] = "rbxassetid://17889461810", --punch4

    ["17859015788"] = "rbxassetid://12684185971", --punch idk

    ["11365563255"] = "rbxassetid://14516273501" --punch idk

}


local queue = {}

local isAnimating = false


local function playReplacementAnimation(animationId)

    if isAnimating then

        table.insert(queue, animationId)

        return

    end

   

    isAnimating = true

    local replacementAnimationId = replacementAnimations[tostring(animationId)]

    if replacementAnimationId then

        local AnimAnim = Instance.new("Animation")

        AnimAnim.AnimationId = replacementAnimationId

        local Anim = humanoid:LoadAnimation(AnimAnim)

        Anim:Play()

       

        Anim.Stopped:Connect(function()

            isAnimating = false

            if #queue > 0 then

                local nextAnimationId = table.remove(queue, 1)

                playReplacementAnimation(nextAnimationId)

            end

        end)

    else

        isAnimating = false

    end

end


local function stopSpecificAnimations()

    for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do

        local animationId = tonumber(track.Animation.AnimationId:match("%d+"))

        if animationIdsToStop[animationId] then

            track:Stop()

        end

    end

end


local function onAnimationPlayed(animationTrack)

    local animationId = tonumber(animationTrack.Animation.AnimationId:match("%d+"))

    if animationIdsToStop[animationId] then

        stopSpecificAnimations()

        animationTrack:Stop()

       

        local replacementAnimationId = replacementAnimations[tostring(animationId)]

        if replacementAnimationId then

            playReplacementAnimation(animationId)

        end

    end

end


humanoid.AnimationPlayed:Connect(onAnimationPlayed)


local player = game.Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()

local humanoidRootPart = character:WaitForChild("HumanoidRootPart")




character.DescendantAdded:Connect(onBodyVelocityAdded)


for _, descendant in pairs(character:GetDescendants()) do

    onBodyVelocityAdded(descendant)

end


player.CharacterAdded:Connect(function(newCharacter)

    character = newCharacter

    humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    character.DescendantAdded:Connect(onBodyVelocityAdded)

   

    for _, descendant in pairs(character:GetDescendants()) do

        onBodyVelocityAdded(descendant)

    end

end) 


-- b64 decode
local function decodeBase64(data)
    local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f = '',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local enabled = false
local userInputService = game:GetService("UserInputService")
local teleported = false
local cooldown = false
 

-- Start checking for animation
spawn(checkAnimation)

-- Function to toggle enabled state
local function onKeyPress(input, gameProcessedEvent)
    if input.KeyCode == Enum.KeyCode.T and not gameProcessedEvent then
        enabled = not enabled
        if enabled then
            print("Enabled")
        else
            print("Disabled")
        end
    end
end


